{"version":3,"file":"index.js","sources":["../src/MockStorage.ts","../src/SimplePromiseQueue.ts","../src/index.ts"],"sourcesContent":["/**\r\n * Created by championswimmer on 22/07/17.\r\n */\r\nexport default class MockStorage implements Storage {\r\n  [index: number]: string;\r\n  [key: string]: any;\r\n\r\n  public get length(): number {\r\n    return Object.keys(this).length\r\n  }\r\n\r\n  public key(index: number): string | any {\r\n    return Object.keys(this)[index]\r\n  }\r\n\r\n  public setItem(key: string, data: any, mutation?: string): void {\r\n    this[key] = data.toString()\r\n  }\r\n  public getItem(key: string): string {\r\n    return this[key]\r\n  }\r\n  public removeItem(key: string): void {\r\n    delete this[key]\r\n  }\r\n  public clear(): void {\r\n    for (const key of Object.keys(this)) {\r\n      delete this[key]\r\n    }\r\n  }\r\n}\r\n","// tslint:disable: variable-name\r\nexport default class SimplePromiseQueue {\r\n  private readonly _queue: Array<Promise<void>> = []\r\n  private _flushing = false\r\n\r\n  public enqueue(promise: Promise<void>) {\r\n    this._queue.push(promise)\r\n    if (!this._flushing) { return this.flushQueue() }\r\n    return Promise.resolve()\r\n  }\r\n\r\n  private flushQueue() {\r\n    this._flushing = true\r\n\r\n    const chain = (): Promise<void> | void => {\r\n      const nextTask = this._queue.shift()\r\n      if (nextTask) {\r\n        return nextTask.then(chain)\r\n      } else {\r\n        this._flushing = false\r\n      }\r\n    }\r\n    return Promise.resolve(chain())\r\n  }\r\n}\r\n","/**\r\n * Created by championswimmer on 18/07/17.\r\n */\r\nimport merge from 'lodash.merge'\r\nimport {Mutation, MutationPayload, Payload, Plugin, Store} from 'vuex'\r\nimport {AsyncStorage} from './AsyncStorage'\r\nimport MockStorage from './MockStorage'\r\nimport {PersistOptions} from './PersistOptions'\r\nimport SimplePromiseQueue from './SimplePromiseQueue'\r\n\r\n/**\r\n * A class that implements the vuex persistence.\r\n */\r\nexport class VuexPersistence<S, P extends Payload> implements PersistOptions<S> {\r\n  public asyncStorage: boolean\r\n  public storage: Storage | AsyncStorage\r\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\r\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage, mutation?: string) => Promise<void> | void\r\n  public reducer: (state: S) => {}\r\n  public key: string\r\n  public filter: (mutation: Payload) => boolean\r\n  public modules: string[]\r\n  public strictMode: boolean\r\n\r\n  /**\r\n   * The plugin function that can be used inside a vuex store.\r\n   */\r\n  public plugin: Plugin<S>\r\n  /**\r\n   * A mutation that can be used to restore state\r\n   * Helpful if we are running in strict mode\r\n   */\r\n  public RESTORE_MUTATION: Mutation<S>\r\n  public subscribed: boolean\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private _mutex = new SimplePromiseQueue()\r\n\r\n  /**\r\n   * Create a {@link VuexPersistence} object.\r\n   * Use the <code>plugin</code> function of this class as a\r\n   * Vuex plugin.\r\n   * @param {PersistOptions} options\r\n   */\r\n  public constructor(options: PersistOptions<S>) {\r\n    this.key = ((options.key != null) ? options.key : 'vuex')\r\n\r\n    this.subscribed = false\r\n\r\n    this.storage =\r\n      ((options.storage != null) ? options.storage : (new MockStorage()))\r\n\r\n    /**\r\n     * How this works is -\r\n     *  1. If there is options.reducer function, we use that, if not;\r\n     *  2. We check options.modules;\r\n     *    1. If there is no options.modules array, we use entire state in reducer\r\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\r\n     *        defined in the options.modules[] array\r\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\r\n     */\r\n    this.reducer = (\r\n      (options.reducer != null)\r\n        ? options.reducer\r\n        : (\r\n          (options.modules == null)\r\n            ? ((state: S) => state)\r\n            : (\r\n              (state: any) =>\r\n                (options.modules as string[]).reduce((a, i) =>\r\n                  merge(a, { [i]: state[i] }), {})\r\n            )\r\n        )\r\n    )\r\n\r\n    this.filter = (\r\n      (options.filter != null)\r\n        ? options.filter\r\n        : ((mutation) => true)\r\n    )\r\n\r\n    this.strictMode = options.strictMode || false\r\n\r\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\r\n      (this as any)._vm.$set(state, merge(state, savedState))\r\n    }\r\n\r\n    this.asyncStorage = options.asyncStorage || false\r\n    const storageConfig = ((this.storage) as any)._config\r\n    this.asyncStorage = (storageConfig && storageConfig.name) === 'localforage'\r\n\r\n    if (this.asyncStorage) {\r\n\r\n      /**\r\n       * Async {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\r\n       */\r\n      this.restoreState = (\r\n        (options.restoreState != null)\r\n          ? options.restoreState\r\n          : ((key: string, storage: AsyncStorage) =>\r\n              (storage ).getItem(key)\r\n                .then((value) =>\r\n                  typeof value === 'string' // If string, parse, or else, just return\r\n                    ? JSON.parse(value || '{}')\r\n                    : (value || {})\r\n                )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Async {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage, mutation?: string) =>\r\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage, mutation?: string) => Promise<void>)}\r\n       */\r\n      this.saveState = (\r\n        (options.saveState != null)\r\n          ? options.saveState\r\n          : ((key: string, state: {}, storage: AsyncStorage, mutation: string) =>\r\n              (storage).setItem(\r\n                key, // Second argument is state _object_ if localforage, stringified otherwise\r\n                (((storage && storage._config && storage._config.name) === 'localforage')\r\n                  ? merge({}, state)\r\n                  : JSON.stringify(state) as any),\r\n                mutation\r\n              )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Async version of plugin\r\n       * @param {Store<S>} store\r\n       */\r\n      this.plugin = (store: Store<S>) => {\r\n        ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\r\n          /**\r\n           * If in strict mode, do only via mutation\r\n           */\r\n          if (this.strictMode) {\r\n            store.commit('RESTORE_MUTATION', savedState)\r\n          } else {\r\n            store.replaceState(merge(store.state, savedState))\r\n          }\r\n\r\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\r\n            if (this.filter(mutation)) {\r\n              this._mutex.enqueue(\r\n                this.saveState(this.key, this.reducer(state), this.storage, mutation.type) as Promise<void>\r\n              )\r\n            }\r\n          })\r\n          this.subscribed = true\r\n        })\r\n      }\r\n    } else {\r\n\r\n      /**\r\n       * Sync {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\r\n       */\r\n      this.restoreState = (\r\n        (options.restoreState != null)\r\n          ? options.restoreState\r\n          : ((key: string, storage: Storage) => {\r\n             const value = (storage).getItem(key)\r\n             if (typeof value === 'string') {// If string, parse, or else, just return\r\n                return JSON.parse(value || '{}')\r\n             } else {\r\n               return (value || {})\r\n             }\r\n          })\r\n      )\r\n\r\n      /**\r\n       * Sync {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage, mutation?: string) =>\r\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage, mutation?: string) => Promise<void>)}\r\n       */\r\n      this.saveState = (\r\n        (options.saveState != null)\r\n          ? options.saveState\r\n          : ((key: string, state: {}, storage: Storage | any, mutation: string) =>\r\n              (storage).setItem(\r\n                key, // Second argument is state _object_ if localforage, stringified otherwise\r\n                JSON.stringify(state) as any,\r\n                mutation\r\n              )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Sync version of plugin\r\n       * @param {Store<S>} store\r\n       */\r\n      this.plugin = (store: Store<S>) => {\r\n        const savedState = this.restoreState(this.key, this.storage) as S\r\n\r\n        if (this.strictMode) {\r\n          store.commit('RESTORE_MUTATION', savedState)\r\n        } else {\r\n          store.replaceState(merge(store.state, savedState))\r\n        }\r\n\r\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\r\n          if (this.filter(mutation)) {\r\n            this.saveState(this.key, this.reducer(state), this.storage, mutation.type)\r\n          }\r\n        })\r\n\r\n        this.subscribed = true\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a subscriber on the store. automatically is used\r\n   * when this is used a vuex plugin. Not for manual usage.\r\n   * @param store\r\n   */\r\n  private subscriber = (store: Store<S>) =>\r\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\r\n}\r\n\r\nexport {\r\n  MockStorage, AsyncStorage, PersistOptions\r\n}\r\n\r\nexport default VuexPersistence\r\n"],"names":[],"mappings":";;;;;;;;AAAA;;;AAGA;IAAA;KA0BC;IAtBC,sBAAW,+BAAM;aAAjB;YACE,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA;SAChC;;;OAAA;IAEM,yBAAG,GAAV,UAAW,KAAa;QACtB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAA;KAChC;IAEM,6BAAO,GAAd,UAAe,GAAW,EAAE,IAAS,EAAE,QAAiB;QACtD,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;KAC5B;IACM,6BAAO,GAAd,UAAe,GAAW;QACxB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;KACjB;IACM,gCAAU,GAAjB,UAAkB,GAAW;QAC3B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;KACjB;IACM,2BAAK,GAAZ;QACE,KAAkB,UAAiB,EAAjB,KAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAjB,cAAiB,EAAjB,IAAiB;YAA9B,IAAM,GAAG,SAAA;YACZ,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;SACjB;KACF;IACH,kBAAC;CAAA;;AC7BD;AACA;IAAA;QACmB,WAAM,GAAyB,EAAE,CAAA;QAC1C,cAAS,GAAG,KAAK,CAAA;KAqB1B;IAnBQ,oCAAO,GAAd,UAAe,OAAsB;QACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAAE,OAAO,IAAI,CAAC,UAAU,EAAE,CAAA;SAAE;QACjD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;KACzB;IAEO,uCAAU,GAAlB;QAAA,iBAYC;QAXC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;QAErB,IAAM,KAAK,GAAG;YACZ,IAAM,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;YACpC,IAAI,QAAQ,EAAE;gBACZ,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aAC5B;iBAAM;gBACL,KAAI,CAAC,SAAS,GAAG,KAAK,CAAA;aACvB;SACF,CAAA;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAA;KAChC;IACH,yBAAC;CAAA;;ACxBD;;;AAGA,AAOA;;;AAGA;;;;;;;IA+BE,yBAAmB,OAA0B;QAA7C,iBA0KC;;QAlLO,WAAM,GAAG,IAAI,kBAAkB,EAAE,CAAA;;;;;;QAyLjC,eAAU,GAAG,UAAC,KAAe;YACnC,OAAA,UAAC,OAAqD,IAAK,OAAA,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,GAAA;SAAA,CAAA;QAjLnF,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,IAAI,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,CAAA;QAEzD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;QAEvB,IAAI,CAAC,OAAO;aACT,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,WAAW,EAAE,CAAC,CAAC,CAAA;;;;;;;;;;QAWrE,IAAI,CAAC,OAAO,IACV,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI;cACpB,OAAO,CAAC,OAAO;eAEf,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI;mBACnB,UAAC,KAAQ,IAAK,OAAA,KAAK,GAAA;mBAEpB,UAAC,KAAU;oBACT,OAAC,OAAO,CAAC,OAAoB,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC;wBACxC,OAAA,KAAK,CAAC,CAAC,YAAI,GAAC,CAAC,IAAG,KAAK,CAAC,CAAC,CAAC,MAAG;;qBAAA,EAAE,EAAE,CAAC;iBAAA,CACrC,CACJ,CACJ,CAAA;QAED,IAAI,CAAC,MAAM,IACT,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI;cACnB,OAAO,CAAC,MAAM;eACb,UAAC,QAAQ,IAAK,OAAA,IAAI,GAAA,CAAC,CACzB,CAAA;QAED,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAA;QAE7C,IAAI,CAAC,gBAAgB,GAAG,0BAA0B,KAAQ,EAAE,UAAe;YACxE,IAAY,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAA;SACxD,CAAA;QAED,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,KAAK,CAAA;QACjD,IAAM,aAAa,GAAI,CAAC,IAAI,CAAC,OAAO,EAAU,OAAO,CAAA;QACrD,IAAI,CAAC,YAAY,GAAG,CAAC,aAAa,IAAI,aAAa,CAAC,IAAI,MAAM,aAAa,CAAA;QAE3E,IAAI,IAAI,CAAC,YAAY,EAAE;;;;;;YAOrB,IAAI,CAAC,YAAY,IACf,CAAC,OAAO,CAAC,YAAY,IAAI,IAAI;kBACzB,OAAO,CAAC,YAAY;mBACnB,UAAC,GAAW,EAAE,OAAqB;oBAClC,OAAA,CAAC,OAAO,EAAG,OAAO,CAAC,GAAG,CAAC;yBACpB,IAAI,CAAC,UAAC,KAAK;wBACV,OAAA,OAAO,KAAK,KAAK,QAAQ;8BACrB,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC;+BACxB,KAAK,IAAI,EAAE,CAAC;qBAAA,CAClB;iBAAA,CACN,CACJ,CAAA;;;;;;YAOD,IAAI,CAAC,SAAS,IACZ,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI;kBACtB,OAAO,CAAC,SAAS;mBAChB,UAAC,GAAW,EAAE,KAAS,EAAE,OAAqB,EAAE,QAAgB;oBAC/D,OAAA,CAAC,OAAO,EAAE,OAAO,CACf,GAAG;qBACF,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,MAAM,aAAa;0BACpE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC;0BAChB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAQ,GAChC,QAAQ,CACT;iBAAA,CACJ,CACJ,CAAA;;;;;YAMD,IAAI,CAAC,MAAM,GAAG,UAAC,KAAe;gBAC3B,CAAC,KAAI,CAAC,YAAY,CAAC,KAAI,CAAC,GAAG,EAAE,KAAI,CAAC,OAAO,CAAC,EAAiB,IAAI,CAAC,UAAC,UAAU;;;;oBAI1E,IAAI,KAAI,CAAC,UAAU,EAAE;wBACnB,KAAK,CAAC,MAAM,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAA;qBAC7C;yBAAM;wBACL,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAA;qBACnD;oBAED,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,UAAC,QAAyB,EAAE,KAAQ;wBACzD,IAAI,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;4BACzB,KAAI,CAAC,MAAM,CAAC,OAAO,CACjB,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,GAAG,EAAE,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAkB,CAC5F,CAAA;yBACF;qBACF,CAAC,CAAA;oBACF,KAAI,CAAC,UAAU,GAAG,IAAI,CAAA;iBACvB,CAAC,CAAA;aACH,CAAA;SACF;aAAM;;;;;;YAOL,IAAI,CAAC,YAAY,IACf,CAAC,OAAO,CAAC,YAAY,IAAI,IAAI;kBACzB,OAAO,CAAC,YAAY;mBACnB,UAAC,GAAW,EAAE,OAAgB;oBAC9B,IAAM,KAAK,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;oBACpC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;wBAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,CAAA;qBAClC;yBAAM;wBACL,QAAQ,KAAK,IAAI,EAAE,EAAC;qBACrB;iBACH,CAAC,CACL,CAAA;;;;;;YAOD,IAAI,CAAC,SAAS,IACZ,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI;kBACtB,OAAO,CAAC,SAAS;mBAChB,UAAC,GAAW,EAAE,KAAS,EAAE,OAAsB,EAAE,QAAgB;oBAChE,OAAA,CAAC,OAAO,EAAE,OAAO,CACf,GAAG;oBACH,IAAI,CAAC,SAAS,CAAC,KAAK,CAAQ,EAC5B,QAAQ,CACT;iBAAA,CACJ,CACJ,CAAA;;;;;YAMD,IAAI,CAAC,MAAM,GAAG,UAAC,KAAe;gBAC5B,IAAM,UAAU,GAAG,KAAI,CAAC,YAAY,CAAC,KAAI,CAAC,GAAG,EAAE,KAAI,CAAC,OAAO,CAAM,CAAA;gBAEjE,IAAI,KAAI,CAAC,UAAU,EAAE;oBACnB,KAAK,CAAC,MAAM,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAA;iBAC7C;qBAAM;oBACL,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAA;iBACnD;gBAED,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,UAAC,QAAyB,EAAE,KAAQ;oBACzD,IAAI,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;wBACzB,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,GAAG,EAAE,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;qBAC3E;iBACF,CAAC,CAAA;gBAEF,KAAI,CAAC,UAAU,GAAG,IAAI,CAAA;aACvB,CAAA;SACF;KACF;IASH,sBAAC;CAAA;;;;;;"}